

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."insert_user_data"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
    INSERT INTO "public"."UserData" ("userId", role, points, name, email)
    VALUES (
        NEW.id,
        CAST(NULLIF(NEW.raw_user_meta_data->>'role', '') AS INTEGER), 
        0, 
        NEW.raw_user_meta_data->>'name',
        NEW.email
    );
    RETURN NEW;
END;$$;


ALTER FUNCTION "public"."insert_user_data"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_authority_id"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
    IF TG_OP = 'INSERT' THEN
        UPDATE public."UserData"
        SET "authorityId" = NEW.id
        WHERE SPLIT_PART(email, '@', 2) = NEW.domain;

    ELSIF TG_OP = 'UPDATE' THEN
        IF OLD.domain <> NEW.domain THEN
            -- Remove authorityId (set to NULL) for users that matched the OLD domain but no longer match the new one
            UPDATE public."UserData"
            SET "authorityId" = NULL
            WHERE SPLIT_PART(email, '@', 2) = OLD.domain
            AND SPLIT_PART(email, '@', 2) <> NEW.domain;

            -- Set authorityId for users matching the NEW domain
            UPDATE public."UserData"
            SET "authorityId" = NEW.id
            WHERE SPLIT_PART(email, '@', 2) = NEW.domain;
        END IF;
    END IF;

    RETURN NEW;
END;$$;


ALTER FUNCTION "public"."update_authority_id"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."Authorities" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "domain" "text",
    "allowSignup" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."Authorities" OWNER TO "postgres";


ALTER TABLE "public"."Authorities" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Authorities_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Categories" (
    "id" bigint NOT NULL,
    "title" "text" NOT NULL,
    "icon" "text" NOT NULL,
    "authorityId" bigint NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL
);


ALTER TABLE "public"."Categories" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."ProblemComments" (
    "id" bigint NOT NULL,
    "userId" "uuid" NOT NULL,
    "content" "text" NOT NULL,
    "timestamp" timestamp with time zone DEFAULT "now"() NOT NULL,
    "problemId" bigint NOT NULL
);


ALTER TABLE "public"."ProblemComments" OWNER TO "postgres";


ALTER TABLE "public"."ProblemComments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Comments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."Categories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."ProblemCategories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."ProblemReviews" (
    "id" bigint NOT NULL,
    "userId" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "problemId" bigint NOT NULL,
    "stars" integer,
    "importance" integer,
    "helpful" boolean
);


ALTER TABLE "public"."ProblemReviews" OWNER TO "postgres";


COMMENT ON TABLE "public"."ProblemReviews" IS 'Bewertung von Problemen, Sterne sind für die Bewertung der Lösung da, Importance drückt die Wichtigkeit des Problems aus, Helpful drück aus: Problem ist Hilfreich (true) / Problem ist Falschmeldung (false) / Kein Feedback';



ALTER TABLE "public"."ProblemReviews" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."ProblemReviews_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Problems" (
    "id" bigint NOT NULL,
    "title" "text" NOT NULL,
    "location" "text" NOT NULL,
    "description" "text" NOT NULL,
    "image" "text" NOT NULL,
    "authorityId" bigint NOT NULL,
    "status" bigint DEFAULT '0'::bigint NOT NULL,
    "userId" "uuid" NOT NULL,
    "date" "date" DEFAULT "now"() NOT NULL,
    "categoryId" bigint NOT NULL,
    "closedDate" "date",
    "reason" "text"
);


ALTER TABLE "public"."Problems" OWNER TO "postgres";


COMMENT ON COLUMN "public"."Problems"."status" IS 'Represents the current Status of this Problem: -1 - Cancelled, 0 - To Do, 1 - In Progress, 2 - Done';



COMMENT ON COLUMN "public"."Problems"."reason" IS 'If this problem is closed by a user, they have to provide an explanation.';



ALTER TABLE "public"."Problems" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Problems_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."Roles" (
    "id" bigint NOT NULL,
    "name" "text" NOT NULL,
    "displayName" "text"
);


ALTER TABLE "public"."Roles" OWNER TO "postgres";


ALTER TABLE "public"."Roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."Roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."SanitizedProblemReviews" WITH ("security_invoker"='on') AS
 SELECT "ProblemReviews"."id",
    "ProblemReviews"."problemId",
    "ProblemReviews"."stars",
    "ProblemReviews"."importance",
    "ProblemReviews"."helpful"
   FROM "public"."ProblemReviews";


ALTER TABLE "public"."SanitizedProblemReviews" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."UserData" (
    "id" bigint NOT NULL,
    "userId" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "role" bigint NOT NULL,
    "points" bigint NOT NULL,
    "name" "text" NOT NULL,
    "authorityId" bigint,
    "email" "text"
);


ALTER TABLE "public"."UserData" OWNER TO "postgres";


ALTER TABLE "public"."UserData" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."UserRoles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."Authorities"
    ADD CONSTRAINT "Authorities_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."ProblemComments"
    ADD CONSTRAINT "Comments_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Categories"
    ADD CONSTRAINT "ProblemCategories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."ProblemReviews"
    ADD CONSTRAINT "ProblemReviews_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Problems"
    ADD CONSTRAINT "Problems_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."Roles"
    ADD CONSTRAINT "Roles_name_key" UNIQUE ("name");



ALTER TABLE ONLY "public"."Roles"
    ADD CONSTRAINT "Roles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."UserData"
    ADD CONSTRAINT "UserData_userId_key" UNIQUE ("userId");



ALTER TABLE ONLY "public"."UserData"
    ADD CONSTRAINT "UserRoles_pkey" PRIMARY KEY ("id");



CREATE OR REPLACE TRIGGER "on_update_authority" AFTER INSERT OR UPDATE ON "public"."Authorities" FOR EACH ROW EXECUTE FUNCTION "public"."update_authority_id"();



ALTER TABLE ONLY "public"."ProblemComments"
    ADD CONSTRAINT "Comments_problemId_fkey" FOREIGN KEY ("problemId") REFERENCES "public"."Problems"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."ProblemComments"
    ADD CONSTRAINT "Comments_userId_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."Categories"
    ADD CONSTRAINT "ProblemCategories_authorityId_fkey" FOREIGN KEY ("authorityId") REFERENCES "public"."Authorities"("id");



ALTER TABLE ONLY "public"."ProblemComments"
    ADD CONSTRAINT "ProblemComments_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."UserData"("userId");



ALTER TABLE ONLY "public"."ProblemReviews"
    ADD CONSTRAINT "ProblemReviews_problemId_fkey" FOREIGN KEY ("problemId") REFERENCES "public"."Problems"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."ProblemReviews"
    ADD CONSTRAINT "ProblemReviews_userId_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Problems"
    ADD CONSTRAINT "Problems_authorityId_fkey" FOREIGN KEY ("authorityId") REFERENCES "public"."Authorities"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Problems"
    ADD CONSTRAINT "Problems_categoryId_fkey" FOREIGN KEY ("categoryId") REFERENCES "public"."Categories"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."Problems"
    ADD CONSTRAINT "Problems_userId_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."UserData"
    ADD CONSTRAINT "UserData_authorityId_fkey" FOREIGN KEY ("authorityId") REFERENCES "public"."Authorities"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."UserData"
    ADD CONSTRAINT "UserData_userId_fkey" FOREIGN KEY ("userId") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."UserData"
    ADD CONSTRAINT "UserRoles_role_fkey" FOREIGN KEY ("role") REFERENCES "public"."Roles"("id");



CREATE POLICY "All for Admin, Manager" ON "public"."Categories" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."UserData" "u"
  WHERE (("u"."userId" = "auth"."uid"()) AND ("u"."role" = ANY (ARRAY[2, 3]))))));



CREATE POLICY "All for Manager" ON "public"."Authorities" TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."UserData" "u"
  WHERE (("u"."userId" = "auth"."uid"()) AND (("u"."role" = ANY (ARRAY[2, 3])) OR (("u"."role" = 1) AND ("u"."points" >= 20)))))));



ALTER TABLE "public"."Authorities" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Categories" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Delete for Admin, Manager, Verifier" ON "public"."Problems" FOR DELETE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."UserData" "u"
  WHERE (("u"."userId" = "auth"."uid"()) AND ("u"."role" = ANY (ARRAY[2, 3]))))));



CREATE POLICY "Enable delete for users based on user_id" ON "public"."ProblemReviews" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userId"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."ProblemComments" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "userId"));



CREATE POLICY "Enable insert for users based on user_id" ON "public"."ProblemReviews" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "userId"));



CREATE POLICY "Enable read access for all users" ON "public"."Authorities" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."Categories" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."ProblemComments" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."ProblemReviews" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."Problems" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."Roles" FOR SELECT USING (true);



CREATE POLICY "Enable read for all users" ON "public"."UserData" FOR SELECT USING (true);



CREATE POLICY "Enable update for authenticated" ON "public"."UserData" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userId"));



CREATE POLICY "Enable update for users based on user_id" ON "public"."ProblemReviews" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "userId")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "userId"));



CREATE POLICY "Insert for LoggedIn" ON "public"."Problems" FOR INSERT TO "authenticated" WITH CHECK (true);



ALTER TABLE "public"."ProblemComments" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."ProblemReviews" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Problems" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."Roles" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Update for Admin, Manager, Authenticated" ON "public"."Problems" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM ("public"."UserData" "u"
     JOIN "public"."Problems" "p" ON (("u"."userId" = "p"."userId")))
  WHERE (("u"."userId" = "auth"."uid"()) AND ("u"."role" = ANY (ARRAY[1, 2, 3]))))));



ALTER TABLE "public"."UserData" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."insert_user_data"() TO "anon";
GRANT ALL ON FUNCTION "public"."insert_user_data"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."insert_user_data"() TO "service_role";



GRANT ALL ON FUNCTION "public"."update_authority_id"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_authority_id"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_authority_id"() TO "service_role";


















GRANT ALL ON TABLE "public"."Authorities" TO "anon";
GRANT ALL ON TABLE "public"."Authorities" TO "authenticated";
GRANT ALL ON TABLE "public"."Authorities" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Authorities_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Authorities_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Authorities_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."Categories" TO "anon";
GRANT ALL ON TABLE "public"."Categories" TO "authenticated";
GRANT ALL ON TABLE "public"."Categories" TO "service_role";



GRANT ALL ON TABLE "public"."ProblemComments" TO "anon";
GRANT ALL ON TABLE "public"."ProblemComments" TO "authenticated";
GRANT ALL ON TABLE "public"."ProblemComments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Comments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Comments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Comments_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."ProblemCategories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ProblemCategories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ProblemCategories_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."ProblemReviews" TO "anon";
GRANT ALL ON TABLE "public"."ProblemReviews" TO "authenticated";
GRANT ALL ON TABLE "public"."ProblemReviews" TO "service_role";



GRANT ALL ON SEQUENCE "public"."ProblemReviews_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ProblemReviews_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ProblemReviews_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."Problems" TO "anon";
GRANT ALL ON TABLE "public"."Problems" TO "authenticated";
GRANT ALL ON TABLE "public"."Problems" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Problems_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Problems_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Problems_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."Roles" TO "anon";
GRANT ALL ON TABLE "public"."Roles" TO "authenticated";
GRANT ALL ON TABLE "public"."Roles" TO "service_role";



GRANT ALL ON SEQUENCE "public"."Roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."Roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."Roles_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."SanitizedProblemReviews" TO "anon";
GRANT ALL ON TABLE "public"."SanitizedProblemReviews" TO "authenticated";
GRANT ALL ON TABLE "public"."SanitizedProblemReviews" TO "service_role";
GRANT SELECT ON TABLE "public"."SanitizedProblemReviews" TO PUBLIC;



GRANT ALL ON TABLE "public"."UserData" TO "anon";
GRANT ALL ON TABLE "public"."UserData" TO "authenticated";
GRANT ALL ON TABLE "public"."UserData" TO "service_role";



GRANT ALL ON SEQUENCE "public"."UserRoles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."UserRoles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."UserRoles_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
